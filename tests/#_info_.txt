#------------------------------------------------------------------------------#

# PY3:
Ran  2 tests in 0.010s, OK, svn:  4833
Ran 12 tests in 0.020s, OK, svn:  6484
Ran 12 tests in 0.010s, OK, svn:  7625
Ran 12 tests in 0.010s, OK, svn:  7631
Ran 12 tests in 0.010s, OK, svn:  7720
Ran 12 tests in 0.018s, OK, svn: 10509
Ran 12 tests in 0.018s, OK, svn: 11064

#------------------------------------------------------------------------------#

#    def GetEnv(self, env, version=jni.JNI_VERSION_1_6):
#        if self.jvm is None:
#            return jni.JNI_EDETACHED
#        return self.jvm.GetEnv(env, version)
#
#    def ExceptionCheck(self):
#        return False #!!!
#        env = jni.POINTER(jni.JNIEnv)()
#        self.GetEnv(jni.byref(env))
#        if not env:
#            return jni.JNI_FALSE
#        return env[0].ExceptionCheck()
#
#    def FatalError(self, msg):
#        env = jni.POINTER(jni.JNIEnv)()
#        self.GetEnv(jni.byref(env))
#        #!!! czy tu nie zrobic ExceptionCheck() ?
#        env[0].FatalError(msg)
#
#    def DeleteLocalRef(self, obj):
#        env = jni.POINTER(jni.JNIEnv)()
#        self.GetEnv(jni.byref(env))
#        if not env:
#            return
#        env[0].DeleteLocalRef(obj)
#
#    def DeleteGlobalRef(self, ref):
#        env = jni.POINTER(jni.JNIEnv)()
#        self.GetEnv(jni.byref(env))
#        if not env:
#            return
#        env[0].DeleteGlobalRef(ref)
#
#    def DeleteWeakGlobalRef(self, ref):
#        env = jni.POINTER(jni.JNIEnv)()
#        self.GetEnv(jni.byref(env))
#        if not env:
#            return
#        env[0].DeleteWeakGlobalRef(ref)
#
#    def NewObject(self, cls, mid, args=None):
#        env = jni.POINTER(jni.JNIEnv)()
#        self.GetEnv(jni.byref(env))
#        res = env[0].AllocObject(cls)
#        env[0].CallVoidMethod(res, mid, args)
#        if self.ExceptionCheck():
#            env[0].DeleteLocalRef(res)
#        return res

    #def CallNonvirtualObjectMethod(self, obj, clazz, methodID, args=None):
    #    fun = self.functions[0]
    #    ret = fun.CallNonvirtualObjectMethod(byref(self), obj, clazz, methodID, args)
    #    if fun.ExceptionCheck(byref(self)): self.handleJavaException("CallNonvirtualObjectMethod")
    #    return ret

#-----------------------------------  eof  ------------------------------------#
